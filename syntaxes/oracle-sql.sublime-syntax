%YAML 1.2
---
name: Oracle SQL
file_extensions:
  - sql
scope: source.sql.oracle

variables:
  ident: \b[A-Za-z][A-Za-z0-9$_]*\b
  unquoted_identifier: (?!{{reserved}}){{ident}}
  general_identifier: (?:{{unquoted_identifier}}|"[^"]*")
  reserved: (?i)\b(?:ACCESS|ADD|ALL|ALTER|AND|ANY|AS|ASC|AUDIT|BETWEEN|BY|CHAR|CHECK|CLUSTER|COLUMN|COLUMN_VALUE|COMMENT|COMPRESS|CONNECT|CREATE|CURRENT|DATE|DECIMAL|DEFAULT|DELETE|DESC|DISTINCT|DROP|ELSE|EXCLUSIVE|EXISTS|FILE|FLOAT|FOR|FROM|GRANT|GROUP|HAVING|IDENTIFIED|IMMEDIATE|IN|INCREMENT|INDEX|INITIAL|INSERT|INTEGER|INTERSECT|INTO|IS|LEVEL|LIKE|LOCK|LONG|MAXEXTENTS|MINUS|MLSLABEL|MODE|MODIFY|NESTED_TABLE_ID|NOAUDIT|NOCOMPRESS|NOT|NOWAIT|NULL|NUMBER|OF|OFFLINE|ON|ONLINE|OPTION|OR|ORDER|PCTFREE|PRIOR|PUBLIC|RAW|RENAME|RESOURCE|REVOKE|ROW|ROWID|ROWNUM|ROWS|SELECT|SESSION|SET|SHARE|SIZE|SMALLINT|START|SUCCESSFUL|SYNONYM|SYSDATE|TABLE|THEN|TO|TRIGGER|UID|UNION|UNIQUE|UPDATE|USER|VALIDATE|VALUES|VARCHAR|VARCHAR2|VIEW|WHENEVER|WHERE|WITH)\b

contexts:
  main:
    # Try other partial matches
    - include: comma

    - match: (?i)(?=({{ident}})\s+AS\b)
      push: [statements, query, query-with-block]

    - match: (?=\()
      push: [statements, query, query-from-block]

    # Otherwise, guess it's a simple query
    - match: (?=\S)
      push: statements

  prototype:
    - include: comments

  comments:
    - match: \s+(?=--|/\*) # Consume whitespace before comments
    - match: /\*
      scope: punctuation.definition.comment.begin.sql
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.sql
        - match: \*/
          scope: punctuation.definition.comment.end.sql
          pop: true
    - match: (--).*
      scope: comment.inline.sql
      captures:
        1: punctuation.definition.comment.sql

  expect-hint:
    - meta_include_prototype: false

    - match: /\*\+
      scope: punctuation.definition.comment.begin.sql
      set:
        - meta_include_prototype: false
        - meta_scope: comment.block.sql

        - match: \*/
          scope: punctuation.definition.comment.end.sql
          pop: true

        - include: hint
          with_prototype:
            - match: (?=\*/)
              pop: true

    - match: --\+
      scope: punctuation.definition.comment.begin.sql
      set:
        - meta_include_prototype: false
        - meta_scope: comment.inline.sql

        - match: $
          pop: true

        - include: hint
          with_prototype:
            - match: $
              pop: true

    - include: comments
    - include: else-pop

  hint:
    - match: (?i)\b([\w]+)\b
      push:
        - clear_scopes: 1
        - meta_scope: support.function.hint.sql
        - match: ''
          pop: true

# Utility ######################################################################

  else-pop:
    - match: (?=\S)
      pop: true

  pop-on-terminator:
    - match: (?=\s*(?:[);]))
      pop: true
    - include: pop-on-slash

  pop-on-slash:
    - match: (?=\s*(?:^\s*/\s*$))
      pop: true

# Statements ###################################################################

  statements:
    - match: (?=;)
      pop: true
    - match: ^\s*(/)\s*$
      captures:
        1: punctuation.terminator.statement.sql

    - match: \)
      scope: invalid.illegal

    - match: (?i)\b(?=(?:SELECT|WITH)\b)
      push: query

    - match: (?i)\b(?:INSERT)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.insert.sql
            - match: (?i)\b(?:INTO)\b
              scope: keyword.other.sql
              push:
                -   - match: \(
                      set:
                        -   - match: \)
                              pop: true
                              scope: punctuation.section.group.end.sql
                            - match: (?=\s*(?!\))\S)
                              pop: true
                        - expression-list
                      scope: punctuation.section.group.begin.sql
                    - match: (?=\S)
                      pop: true
                - table-expression
            - include: query
        - expect-hint

    - match: (?i)\b(?:UPDATE)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.update.sql
            - include: query
        - expect-hint

    - match: (?i)\b(?:DELETE)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.delete.sql
            - include: query
        - expect-hint

    - match: (?i)\b(?:MERGE)\b
      scope: keyword.other.sql
      push: statement-merge

    - match: (?=\S)
      push: query

  statement-merge:
    - meta_scope: meta.merge.sql

    - match: (?i)\b(?:INTO)\b
      scope: keyword.other.sql
      push:
        -   - match: ''
              pop: true
        - expect-alias-or-keyword
        -                    

            - match: '{{unquoted_identifier}}'
              pop: true
              scope: variable.other.table.sql
            - match: (")([^"]+)(")
              captures:
                '3': punctuation.definition.string.end.sql
                '2': variable.other.table.sql
                '1': punctuation.definition.string.begin.sql
              pop: true
              scope: string.quoted.double.sql
            - match: (?=\s*(?!{{general_identifier}})\S)
              pop: true
    - match: (?i)\b(?:WHEN)\b
      scope: keyword.other.sql
      push:
        -   - match: ''
              pop: true
        - statement-merge-update-or-insert
        -   - match: (?i)\b(?:THEN)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:THEN)\b)\S)
              pop: true
        -   - match: (?i)\b(?:MATCHED)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:MATCHED)\b)\S)
              pop: true
        -                 

            - match: (?i)\b(?:NOT)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:NOT)\b)\S)
              pop: true
    - include: query

  statement-merge-update-or-insert:
    - match: (?i)\b(?:UPDATE)\b
      scope: keyword.other.sql
      pop: true

    - match: (?i)\b(?:INSERT)\b
      scope: keyword.other.sql
      set:                   

        - match: \(
          set:
            -   - match: \)
                  pop: true
                  scope: punctuation.section.group.end.sql
                - match: (?=\s*(?!\))\S)
                  pop: true
            - expression-list
          scope: punctuation.section.group.begin.sql
        - match: (?=\S)
          pop: true
  pop-on-when:
    - match: (?=\s*(?:(?i)\b(?:WHEN)\b))
      pop: true

# Queries ######################################################################

  query:
    - meta_content_scope: meta.query.sql

    - include: pop-on-terminator
    - include: pop-on-when

    - match: (?i)\b(?:WITH)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.with.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        - query-with-block

    - match: (?i)\b(?:SELECT)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.select.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        -   - include: query-block
            - include: select-list
        -   - match: (?i)\b(?:DISTINCT)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:DISTINCT)\b)\S)
              pop: true
        - expect-hint

    - match: (?i)\b(?:FROM|(NATURAL\s+)?((LEFT|RIGHT|FULL)\s+)?((OUTER|INNER|CROSS)\s+)?JOIN)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.from.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        - query-from-block

    - match: (?i)\b(?:CONNECT\s+BY(\s+NOCYCLE)?|START\s+WITH)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.connect_by.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        - expression

    - match: (?i)\b(?:ON)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.from.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        - expression

    - match: (?i)\b(?:WHERE)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.where.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        - expression

    - match: (?i)\b(?:GROUP)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.group_by.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        -   - include: query-block
            - include: expression-list
        -                 

            - match: (?i)\b(?:BY)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:BY)\b)\S)
              pop: true
    - match: (?i)\b(?:HAVING)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.having.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        - expression

    - match: (?i)\b(?:UNION|INTERSECT|MINUS)\b
      scope: keyword.other.sql
      push:                 

        - match: (?i)\b(?:ALL)\b
          pop: true
          scope: keyword.other.sql
        - match: (?=\s*(?!(?i)\b(?:ALL)\b)\S)
          pop: true
    - match: (?i)\b(?:ORDER)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.order-by.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        -   - include: query-block
            - include: order-by-list
        -   - match: (?i)\b(?:BY)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:BY)\b)\S)
              pop: true
        -                 

            - match: (?i)\b(?:SIBLINGS)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:SIBLINGS)\b)\S)
              pop: true
    - match: (?i)\b(?:PIVOT)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.pivot.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        -   - match: \(
              set:
                -   - match: \)
                      pop: true
                      scope: punctuation.section.group.end.sql
                    - match: (?=\s*(?!\))\S)
                      pop: true
                - query-pivot-clause-body
              scope: punctuation.section.group.begin.sql
            - match: (?=\S)
              pop: true
        -                 

            - match: (?i)\b(?:XML)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:XML)\b)\S)
              pop: true
    - match: (?i)\b(?:BULK)\b
      push:
        - meta_scope: keyword.other.sql
        - match: (?i)\b(?:COLLECT)\b
        - match: (?i)\b(?:INTO)\b
          set:
            - match: '{{unquoted_identifier}}'
              pop: true
              scope: variable.other.table.sql
            - match: (")([^"]+)(")
              captures:
                '3': punctuation.definition.string.end.sql
                '2': variable.other.table.sql
                '1': punctuation.definition.string.begin.sql
              pop: true
              scope: string.quoted.double.sql
            - match: (?=\s*(?!{{general_identifier}})\S)
              pop: true
        - include: else-pop

    - match: (?i)\b(?:RETURNING)\b
      scope: keyword.other.sql
      push: expression-list

    - match: (?i)\b(?:INTO)\b
      scope: keyword.other.sql
      push:                    

        - match: '{{unquoted_identifier}}'
          pop: true
          scope: variable.other.table.sql
        - match: (")([^"]+)(")
          captures:
            '3': punctuation.definition.string.end.sql
            '2': variable.other.table.sql
            '1': punctuation.definition.string.begin.sql
          pop: true
          scope: string.quoted.double.sql
        - match: (?=\s*(?!{{general_identifier}})\S)
          pop: true
    - match: (?i)\b(?:VALUES)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.values.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        -                   

            - match: \(
              set:
                -   - match: \)
                      pop: true
                      scope: punctuation.section.group.end.sql
                    - match: (?=\s*(?!\))\S)
                      pop: true
                - expression-list
              scope: punctuation.section.group.begin.sql
            - match: (?=\S)
              pop: true
    - match: (?i)\b(?:SET)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.set.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        - expression-list

    - match: (?i)\b(?:USING)\b
      scope: keyword.other.sql
      push:
        -   - meta_scope: meta.query.using.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        - query-from-block

    - match: (?i)\b(?=(?:INSERT|UPDATE|DELETE)\b)
      pop: true

  query-breaker:
    - match: "(?ix)(?=\\s*\\b(?:\n  with|select|from|where|connect|start\\s+with|group|pivot|unpivot|order|having\n\
        \  |(natural)?\\s*(left|right|full)?\\s*(inner|outer|cross)?\\s*join|on\n\
        \  |union|intersect|minus\n  |(bulk\\s+collect\\s+)?into|using|when|set|values\n\
        \  |insert|update|delete\n)\\b)"
      pop: true

  query-block:
    - include: query-breaker
    - include: pop-on-terminator
    - include: pop-on-when

  query-with-block:
    - include: query-block
    - include: comma

    - match: (?=\()
      push:                   

        - match: \(
          set:
            -   - match: \)
                  pop: true
                  scope: punctuation.section.group.end.sql
                - match: (?=\s*(?!\))\S)
                  pop: true
            - query
          scope: punctuation.section.group.begin.sql
        - match: (?=\S)
          pop: true
    - match: (?={{general_identifier}})
      push:
        -   - meta_scope: meta.subquery.sql
            - match: ''
              pop: true
        -   - match: \(
              set:
                -   - match: \)
                      pop: true
                      scope: punctuation.section.group.end.sql
                    - match: (?=\s*(?!\))\S)
                      pop: true
                - query
              scope: punctuation.section.group.begin.sql
            - match: (?=\S)
              pop: true
        -   - match: (?i)\b(?:as)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:as)\b)\S)
              pop: true
        -                    

            - match: '{{unquoted_identifier}}'
              pop: true
              scope: entity.name.subquery.sql
            - match: (")([^"]+)(")
              captures:
                '3': punctuation.definition.string.end.sql
                '2': entity.name.subquery.sql
                '1': punctuation.definition.string.begin.sql
              pop: true
              scope: string.quoted.double.sql
            - match: (?=\s*(?!{{general_identifier}})\S)
              pop: true
  select-list:          

    - match: ''
      set:
        -   - match: ','
              push: select-expression
              scope: punctuation.separator.comma.sql
            - include: else-pop
        - select-expression
  select-expression:
    - match: (?=\S)
      set:
        -   - meta_scope: meta.select-expression.sql
            - match: ''
              pop: true
        -   - match: '{{unquoted_identifier}}'
              pop: true
              scope: entity.name.alias.sql
            - match: (")([^"]+)(")
              captures:
                '3': punctuation.definition.string.end.sql
                '2': entity.name.alias.sql
                '1': punctuation.definition.string.begin.sql
              pop: true
              scope: string.quoted.double.sql
            - match: (?=\s*(?!{{general_identifier}})\S)
              pop: true
        -   - match: (?i)\b(?:as)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:as)\b)\S)
              pop: true
        - expression
  query-from-block:
    - include: query-block
    - include: comma

    - match: (?=\S)
      push:
        - expect-alias-or-keyword
        - table-expression

  table-expression:
    - match: (?=\()
      set:                   

        - match: \(
          set:
            -   - match: \)
                  pop: true
                  scope: punctuation.section.group.end.sql
                - match: (?=\s*(?!\))\S)
                  pop: true
            - query
          scope: punctuation.section.group.begin.sql
        - match: (?=\S)
          pop: true
    - match: \b({{unquoted_identifier}})\s*(\.)
      captures:
        1: variable.other.schema.sql
        2: punctuation.accessor.sql

    - match: (?i)\b(?:DUAL)\b
      scope: variable.language.table
      pop: true

    - match: (?i)\b(?:TABLE)\b
      scope: keyword.other.sql
      set:                   

        - match: \(
          set:
            -   - match: \)
                  pop: true
                  scope: punctuation.section.group.end.sql
                - match: (?=\s*(?!\))\S)
                  pop: true
            - expression
          scope: punctuation.section.group.begin.sql
        - match: (?=\S)
          pop: true
    - match: (?={{general_identifier}})
      set:
        -   - match: '@'
              set:
                - match: '{{unquoted_identifier}}'
                  pop: true
                  scope: variable.other.dblink.sql
                - match: (")([^"]+)(")
                  captures:
                    '3': punctuation.definition.string.end.sql
                    '2': variable.other.dblink.sql
                    '1': punctuation.definition.string.begin.sql
                  pop: true
                  scope: string.quoted.double.sql
                - match: (?=\s*(?!{{general_identifier}})\S)
                  pop: true
              scope: punctuation.accessor.dblink.sql
            - match: (?=\s*(?!@)\S)
              pop: true
        -                    

            - match: '{{unquoted_identifier}}'
              pop: true
              scope: variable.other.table
            - match: (")([^"]+)(")
              captures:
                '3': punctuation.definition.string.end.sql
                '2': variable.other.table
                '1': punctuation.definition.string.begin.sql
              pop: true
              scope: string.quoted.double.sql
            - match: (?=\s*(?!{{general_identifier}})\S)
              pop: true
    - include: else-pop

  expect-alias-or-keyword:
    - include: query-breaker
    - include: expect-alias

  expect-alias:                    

    - match: '{{unquoted_identifier}}'
      pop: true
      scope: entity.name.alias
    - match: (")([^"]+)(")
      captures:
        '3': punctuation.definition.string.end.sql
        '2': entity.name.alias
        '1': punctuation.definition.string.begin.sql
      pop: true
      scope: string.quoted.double.sql
    - match: (?=\s*(?!{{general_identifier}})\S)
      pop: true
  query-pivot-clause-body:
    - match: (?=\S)
      set:
        -   - match: (?i)\b(?:IN)\b
              scope: keyword.other.sql
              push:
                -   - meta_scope: meta.query.pivot.in.sql
                    - clear_scopes: 1
                    - match: ''
                      pop: true
                -             

                    - match: \(
                      set:
                        -   - match: \)
                              pop: true
                              scope: punctuation.section.group.end.sql
                            - match: (?=\s*(?!\))\S)
                              pop: true
                        - select-list
                      scope: punctuation.section.group.begin.sql
                    - match: (?=\S)
                      pop: true
            - include: else-pop

        -   - match: (?i)\b(?:FOR)\b
              scope: keyword.other.sql
              push:
                -   - meta_scope: meta.query.pivot.for.sql
                    - clear_scopes: 1
                    - match: ''
                      pop: true
                -             

                    - match: \(
                      set:
                        -   - match: \)
                              pop: true
                              scope: punctuation.section.group.end.sql
                            - match: (?=\s*(?!\))\S)
                              pop: true
                        - expression-list
                      scope: punctuation.section.group.begin.sql
                    - match: (?=\S)
                      pop: true
            - include: else-pop

        - select-list
  expression-list:
    - match: (?=\S)
      set:
        - expression-list-end
        - expression

  expression-list-end:
    - match: ','
      scope: punctuation.separator.comma.sql
      push: expression
    - include: else-pop

  expression:
    - match: (?=\S)
      set:
        - expression-end
        - expression-begin

  expression-begin:
    - include: pop-on-terminator
    - match: (?=\s*(?:,))
      pop: true

    - include: operators-prefix
    - include: literals
    - include: case-expression
    - include: builtins

    - match: (?={{general_identifier}}\s*\()
      set:
        -   - meta_scope: meta.function-call.sql
            - match: ''
              pop: true
        -   - include: function-arguments
            - include: else-pop
        -   - include: builtin-functions
            - include: function-name

    - include: variable

    - match: \*
      scope: keyword.operator.star.sql
      pop: true

    - match: (?=\()
      set:
        -   - meta_scope: meta.group.sql
            - match: ''
              pop: true
        -                   

            - match: \(
              set:
                -   - match: \)
                      pop: true
                      scope: punctuation.section.group.end.sql
                    - match: (?=\s*(?!\))\S)
                      pop: true
                - expression-list-or-subquery
              scope: punctuation.section.group.begin.sql
            - match: (?=\S)
              pop: true
    - include: else-pop

  expression-end:
    - include: pop-on-terminator
    - match: (?=\s*(?:(?i)\b(?:WHEN|THEN|ELSE|END)\b))
      pop: true
    - match: (?=\s*(?:,))
      pop: true

    - include: operators-infix
    - include: operators-postfix

    - match: (?=\()
      push: function-arguments

    - match: (%){{ident}}\b
      scope: support.function.attribute.sql
      captures:
        1: punctuation.accessor.attribute.sql
      pop: true

    - match: (?i)\b(?:OVER)\b
      scope: keyword.other.sql
      push:                   

        - match: \(
          set:
            -   - match: \)
                  pop: true
                  scope: punctuation.section.group.end.sql
                - match: (?=\s*(?!\))\S)
                  pop: true
            - analytic-clause-contents
          scope: punctuation.section.group.begin.sql
        - match: (?=\S)
          pop: true
    - include: else-pop

  function-arguments:
    - match: (?=\S)
      set:
        -   - meta_scope: meta.function-call.arguments.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        -   - match: \(
              set:
                -   - match: \)
                      pop: true
                      scope: punctuation.section.group.end.sql
                    - match: (?=\s*(?!\))\S)
                      pop: true
                - expression-list
              scope: punctuation.section.group.begin.sql
            - match: (?=\S)
              pop: true
  expression-list-or-subquery:
    - match: (?i)\b(?=(?:SELECT|WITH)\b)
      set: query
    - match: (?=\S)
      set: expression-list

  operators-prefix:
    - match: -|\+
      scope: keyword.operator.arithmetic.sql

    - match: (?i)\b(?:NOT)\b
      scope: keyword.operator.logical.sql

    - match: (?i)\b(?:EXISTS|ANY|SOME|ALL|PRIOR|DISTINCT)\b
      scope: keyword.operator.word.sql

    - match: (?i)\b(?:NEW)\b
      scope: keyword.operator.word.sql

  operators-infix:
    - match: \.(?!\.)
      scope: punctuation.accessor.sql
      push: expression-begin

    - match: =>
      scope: punctuation.separator.key-value.sql
      push: expression-begin

    - match: -|\+|\*\*|\*|/
      scope: keyword.operator.arithmetic.sql
      push: expression-begin

    - match: \|\|
      scope: keyword.operator.concatenation.sql
      push: expression-begin

    - match: <=|>=|\^=|~=|<>|!=|<|>|=
      scope: keyword.operator.relational.sql
      push: expression-begin

    - match: (?i)\b(?:IN)\b
      scope: keyword.operator.word.sql
      push: expression-begin

    - match: (?i)\b(?:NOT)\b
      scope: keyword.operator.word.sql
      push:
        -   - match: ''
              pop: true
        - expression-begin
        -                 

            - match: (?i)\b(?:IN)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:IN)\b)\S)
              pop: true
    - match: (?i)\b(?:AND|OR)\b
      scope: keyword.operator.logical.sql
      push: expression-begin

    - match: (?i)\b(?:BETWEEN)\b
      scope: keyword.operator.relational.sql
      push: expression-begin

    - match: (?i)\b(?:LIKE[24C]?)\b
      scope: keyword.operator.string.sql
      set:
        - include: like-pattern
        - include: expression

  operators-postfix:
    - match: (?i)\b(?:IS)\b
      scope: keyword.operator.word.sql
      push:
        -   - match: (?i)\b(?:NULL|NAN|INFINITE)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:NULL|NAN|INFINITE)\b)\S)
              pop: true
        -                 

            - match: (?i)\b(?:NOT)\b
              pop: true
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:NOT)\b)\S)
              pop: true
    - match: \(\+\)
      scope: keyword.operator.join.sql

  variable:
    - match: (?={{general_identifier}})
      set:                    

        - match: '{{unquoted_identifier}}'
          pop: true
          scope: variable.other.sql
        - match: (")([^"]+)(")
          captures:
            '3': punctuation.definition.string.end.sql
            '2': variable.other.sql
            '1': punctuation.definition.string.begin.sql
          pop: true
          scope: string.quoted.double.sql
        - match: (?=\s*(?!{{general_identifier}})\S)
          pop: true
    - match: (:){{ident}}
      scope: variable.other.sql
      captures:
        1: punctuation.definition.parameter.sql
      pop: true

  function-name:                    

    - match: '{{unquoted_identifier}}'
      pop: true
      scope: variable.function.sql
    - match: (")([^"]+)(")
      captures:
        '3': punctuation.definition.string.end.sql
        '2': variable.function.sql
        '1': punctuation.definition.string.begin.sql
      pop: true
      scope: string.quoted.double.sql
    - match: (?=\s*(?!{{general_identifier}})\S)
      pop: true
  analytic-clause-contents:
    - include: pop-on-terminator

    - match: (?i)\b(?:PARTITION\s+BY)\b
      scope: keyword.other.sql
      set:
        - include: analytic-clause-contents
        - include: expression-list

    - match: (?i)\b(?:ORDER\s+BY)\b
      scope: keyword.order.sql
      set:
        - include: analytic-clause-contents
        - include: order-by-list

    - match: (?i)\b(?:ROWS|RANGE)\b
      scope: keyword.other.sql
      set:
        - match: (?i)\b(?:UNBOUNDED|PRECEDING|FOLLOWING|CURRENT\s+ROW)\b
          scope: keyword.other.sql

        - include: analytic-clause-contents
        - include: expression-list

  literals:
    - match: (?i)[-+]?(\b\d+(\.\d*)?|\.\d+)(e[-+]?\d+)?[fd]?
      scope: constant.numeric.sql
      pop: true

    - match: (?i)\b(?:NULL)\b
      scope: constant.language.null.sql
      pop: true

    - match: (?i)\b(?:TRUE)\b
      scope: constant.language.boolean.true.sql
      pop: true

    - match: (?i)\b(?:FALSE)\b
      scope: constant.language.boolean.false.sql
      pop: true

    - include: string

    - match: (?i)\b(?:INTERVAL)\b
      scope: keyword.other.sql
      set:
        -   - match: (?i)\b(?:YEAR|MONTH|DAY|HOUR|MINUTE|SECOND|TO)\b
              scope: keyword.other.sql
            - include: else-pop
        -   - include: string
            - include: else-pop

    - match: (?i)\b(?:DATE|TIMESTAMP)\b
      scope: keyword.other.sql
      set:
        - include: string
        - include: else-pop

  string:
    - match: (?i:n)?\'
      scope: punctuation.definition.string.begin.sql
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.sql
        - match: \'\'
          scope: constant.character.escape.sql
        - match: \'
          scope: punctuation.definition.string.end.sql
          pop: true

    - match: (?i)q\'!
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.heredoc.sql
        - match: "!\\'"
          pop: true
          scope: punctuation.definition.string.end.sql
      scope: punctuation.definition.string.begin.sql
    - match: (?i)q\'\[
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.heredoc.sql
        - match: \]\'
          pop: true
          scope: punctuation.definition.string.end.sql
      scope: punctuation.definition.string.begin.sql
    - match: (?i)q\'\{
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.heredoc.sql
        - match: \}\'
          pop: true
          scope: punctuation.definition.string.end.sql
      scope: punctuation.definition.string.begin.sql
    - match: (?i)q\'\(
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.heredoc.sql
        - match: \)\'
          pop: true
          scope: punctuation.definition.string.end.sql
      scope: punctuation.definition.string.begin.sql
    - match: (?i)q\'\<
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.heredoc.sql
        - match: \>\'
          pop: true
          scope: punctuation.definition.string.end.sql
      scope: punctuation.definition.string.begin.sql

  like-pattern:
    - match: \'
      scope: punctuation.definition.string.begin.sql
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.sql
        - match: \'\'
          scope: constant.character.escape.sql
        - match: _|%
          scope: constant.other.placeholder.sql
        - match: \'
          scope: punctuation.definition.string.end.sql
          set:
            - match: (?i)\b(?:ESCAPE)\b
              set: expression
              scope: keyword.other.sql
            - match: (?=\s*(?!(?i)\b(?:ESCAPE)\b)\S)
              pop: true

  comma:
    - match: ','
      scope: punctuation.separator.comma.sql

  order-by-list:
    - include: pop-on-terminator

    - include: comma

    - match: (?=\S)
      push: [order-expression, expression]

  order-expression:
    - match: (?i)\b(?:ASC|DESC|NULLS|FIRST|LAST)\b
      scope: keyword.other.sql
    - include: else-pop

  builtins:
    - match: (?i)\b(?:ROWNUM|LEVEL)\b
      scope: variable.language.sql
      pop: true
    - match: (?i)\b(?:USER|UID|SYSDATE)\b
      scope: support.function.sql
      pop: true

  builtin-functions:
    - match: (?i)\b(?:sqlcode|sqlerrm)\b
      scope: support.function.error.sql
      pop: true
    - match: (?i)\b(?:abs|acos|asin|atan|atan2|bitand|ceil|cos|cosh|exp|floor|ln|log|mod|power|round|sign|sin|sinh|sqrt|tan|tanh|trunc)\b
      scope: support.function.number.sql
      pop: true
    - match: (?i)\b(?:ascii|chr|concat|initcap|instr|instrb|length|lengthb|lower|lpad|ltrim|nls_initcap|nls_lower|nlssort|nls_upper|replace|rpad|rtrim|soundex|substr|substrb|translate|trim|upper)\b
      scope: support.function.character.sql
      pop: true
    - match: (?i)\b(?:chartorowid|convert|hextoraw|rawtohex|rowidtochar|to_(?:blob|char|clob|date|multi_byte|nclob|number|single_byte))\b
      scope: support.function.conversion.sql
      pop: true
    - match: (?i)\b(?:add_months|current_date|current_timestamp|dbtimezone|extract|from_tz|last|day|localtimestamp|months_between|new_time|next_dat|numtodsinterval|numtoyminterval|round|sessiontimezone|sysdate|systimestamp|to_dsinterval|to_timestamp(_l?tz)?|to_yminterval|tz_offset|trunc)\b
      scope: support.function.date.sql
      pop: true
    - match: (?i)\b(?:deref|ref|value|treat)\b
      scope: support.function.objref.sql
      pop: true
    - match: (?i)\b(?:bfilename|decode|dump|empty_blob|empty_clob|greatest|least|nls_charset_(?:decl_len|id|name)|nvl|sys_context|sys_guid|uid|user|userenv|vsize)\b
      scope: support.function.misc.sql
      pop: true

    - match: (?i)\b(?:APPROX_COUNT_DISTINCT|AVG|COLLECT|CORR(_K|_S)?|COUNT|COVAR(_POP|_SAMP)|CUME_DIST|FIRST|GROUP_ID|GROUPING(_ID)?|LAST|LISTAGG|MAX|MEDIAN|MIN|PERCENTILE(_CONT|_DISC)|(DENSE_|PERCENT_)?RANK|REGR_(SLOPE|INTERCEPT|COUNT|R2|AVG[XY]|SX[XY]|SYY)|STATS_(BINOMIAL_TEST|CROSSTAB|MODE|ONE_WAY_ANOVA|(F|KS|MW|T|WSR)_TEST)|STDDEV(_POP|_SAMP)?|SUM|SYS_OP_ZONE_ID|VAR(_POP|_SAMP|IANCE)|(SYS_)?XMLAGG)\b
      scope: support.function.aggregate.sql
      pop: true

  case-expression:
    - match: (?i)\b(?:CASE)\b
      scope: keyword.control.case.sql
      set:
        -   - meta_scope: meta.case.sql
            - match: ''
              pop: true
        - case-body
        -   - include: pop-on-when
            - include: expression

  case-body:
    - match: (?i)\b(?:WHEN)\b
      scope: keyword.control.case.when.sql
      push:
        -   - meta_scope: meta.case.when.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        - expression

    - match: (?i)\b(?:THEN)\b
      scope: keyword.control.case.then.sql
      push:
        -   - meta_scope: meta.case.then.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        - expression

    - match: (?i)\b(?:ELSE)\b
      scope: keyword.control.case.else.sql
      push:
        -   - meta_scope: meta.case.else.sql
            - clear_scopes: 1
            - match: ''
              pop: true
        - expression

    - match: (?i)\b(?:END)\b
      scope: keyword.control.end.sql
      pop: true

    - match: \S+
      scope: invalid.illegal
