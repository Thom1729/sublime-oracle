%YAML 1.2
%TAG ! tag:yaml-macros:Oracle.syntaxes.macros:
---
name: Oracle PL/SQL
file_extensions:
  - sql
  - pkb
  - pks
  - pls
scope: source.plsql

variables:
  reserved: !word ACCESS|ADD|ALL|ALTER|AND|ANY|AS|ASC|AUDIT|BETWEEN|BY|CHAR|CHECK|CLUSTER|COLUMN|COLUMN_VALUE|COMMENT|COMPRESS|CONNECT|CREATE|CURRENT|DATE|DECIMAL|DEFAULT|DELETE|DESC|DISTINCT|DROP|ELSE|EXCLUSIVE|EXISTS|FILE|FLOAT|FOR|FROM|GRANT|GROUP|HAVING|IDENTIFIED|IMMEDIATE|IN|INCREMENT|INDEX|INITIAL|INSERT|INTEGER|INTERSECT|INTO|IS|LEVEL|LIKE|LOCK|LONG|MAXEXTENTS|MINUS|MLSLABEL|MODE|MODIFY|NESTED_TABLE_ID|NOAUDIT|NOCOMPRESS|NOT|NOWAIT|NULL|NUMBER|OF|OFFLINE|ON|ONLINE|OPTION|OR|ORDER|PCTFREE|PRIOR|PUBLIC|RAW|RENAME|RESOURCE|REVOKE|ROW|ROWID|ROWNUM|ROWS|SELECT|SESSION|SET|SHARE|SIZE|SMALLINT|START|SUCCESSFUL|SYNONYM|SYSDATE|TABLE|THEN|TO|TRIGGER|UID|UNION|UNIQUE|UPDATE|USER|VALIDATE|VALUES|VARCHAR|VARCHAR2|VIEW|WHENEVER|WHERE|WITH
  ident: '\b[A-Za-z][A-Za-z0-9$_]*\b'
  unquoted_identifier: '(?!{{reserved}}){{ident}}'
  general_identifier: '(?:{{unquoted_identifier}}|"[^"]*")'

  builtin_type: !word N?CHAR|N?VARCHAR2?|CLOB|NUMBER|INTEGER|JSON|DATE|BOOLEAN|EXCEPTION

contexts:
  main:
    - include: statements

  prototype:
    - include: scope:source.sql.oracle#comments

# Utility ######################################################################

  else-pop:
    - match: (?=\S)
      pop: true

  pop-on-terminator:
    - match: (?=\s*[);])
      pop: true
    - include: pop-on-slash

  pop-on-slash:
    - match: ^(?=\s*/\s*$)
      pop: true

# Statements ###################################################################

  statements:
    - match: ';'
      scope: punctuation.terminator.statement.sql

    - match: ^\s*(/)\s*$
      captures:
        1: punctuation.terminator.statement.sql

    - match: (?i)(?=\b(WITH|SELECT|INSERT|UPDATE|DELETE|MERGE)\b)
      push: scope:source.sql.oracle#statements

    - match: !word CREATE
      scope: keyword.other.sql
      push: [!meta meta.create.sql, create]

    - match: !word DECLARE
      scope: keyword.other.sql
      push: declarations

    - include: block

    - match: !word IF
      scope: keyword.control.sql
      push:
        - !meta meta.control.sql.if
        - statement-if-body
        - !expect_keyword THEN
        - expression

    - match: !word LOOP
      scope: keyword.control.sql
      push:
        - !meta meta.loop.sql
        - - !end LOOP
          - include: statements

    - match: !word WHILE
      scope: keyword.control.sql
      push: 
        - !meta meta.loop.sql.while
        - expect-loop-body
        - - !pop_on [ !word LOOP ]
          - include: expression

    - match: !word FOR
      scope: keyword.control.sql
      push:
        - !meta meta.FOR.sql
        - expect-loop-body
        - - !pop_on [ !word LOOP ]
          - include: expression
        - !expect [ \.\., keyword.operator.other ]
        - - !pop_on \.\.
          - include: expression
        - !expect_keyword REVERSE
        - !expect_keyword IN
        - !expect_identifier variable.other.sql

    - include: case-statement

    - match: !word EXECUTE
      scope: keyword.other.sql
      push:
        - - include: expression
        - !expect_keyword IMMEDIATE

    - match: !word OPEN
      scope: keyword.other.sql
      push:
        - - include: scope:source.sql.oracle#statements
        - !expect_keyword FOR
        - !expect_identifier variable.other.cursor.sql
        - !expect [ ':', punctuation.definition.cursor.host.sql ]

    - match: !word RAISE
      scope: keyword.other.sql
      push: !expect_identifier variable.other.sql

    - match: (?=\S)
      push: statement-simple

  block:
    - match: !word BEGIN
      scope: keyword.control.sql
      push: [ !meta meta.BLOCK.sql, statement-block ]

  statement-block:
    - !end

    - match: !word EXCEPTION
      scope: keyword.other.sql
      set: exception-block

    - include: statements

  exception-block:
    - !end

    - match: !word WHEN
      scope: keyword.other.sql
      push:
        - !expect_keyword THEN
        - exception-type

    - include: statements

  exception-type:
    - match: !word OTHERS
      scope: keyword.other.sql
      pop: true
    - match: '{{ident}}'
      scope: variable.other.sql
      pop: true

  statement-if-body:
    - !end IF

    - match: !word ELSIF
      scope: keyword.control.sql
      push:
        - !expect_keyword THEN
        - expression

    - match: !word ELSE
      scope: keyword.control.sql

    - include: statements

  expect-loop-body:
    - match: !word LOOP
      scope: keyword.control.sql
      set:
        - !end LOOP

        - include: statements
    - include: else-pop

# Create #######################################################################

  create:
    - include: pop-on-terminator

    - match: !word OR|REPLACE|NO|FORCE
      scope: keyword.other.sql

    - match: !word TABLE
      scope: keyword.other.sql
      set:
        - !expect [ !word as, keyword.other.sql, query ]
        - table-partitioning-clause
        - !expect_in_parens column-defs
        - expect-table-name

    - match: !word VIEW
      scope: keyword.other.sql
      set: [create-view, expect-table-name]

    - match: !word MATERIALIZED\s+VIEW
      scope: keyword.other.sql
      set: [create-materialized-view, expect-table-name]

    - match: !word PACKAGE
      scope: keyword.other.sql
      set:
        - !meta meta.package.sql
        - - !end
          - include: declarations
        - !expect_keyword IS|AS
        - invoker-rights
        - !expect_identifier entity.name.package.sql
        - expect-schema-name
        - !expect_keyword BODY

    - match: !word PROCEDURE
      scope: keyword.other.sql
      push:
        - !meta meta.function.sql
        - procedure-definition
        - !meta_set meta.function.declaration.sql
        - procedure-spec

    - match: !word FUNCTION
      scope: keyword.other.sql
      push:
        - !meta meta.function.sql
        - procedure-definition
        - !meta_set meta.function.declaration.sql
        - !expect_keyword PIPELINED
        - expect-type
        - !expect_keyword RETURN
        - procedure-spec

  column-defs:
    - include: pop-on-terminator
    - include: comma

    - match: !word CONSTRAINT
      scope: keyword.other.sql
      push: [column-constraint, expect-column-name]

    - match: (?=\S)
      push:
        - !meta COLUMN_DEFINITION
        - expect-virtual-column-definition
        - expect-type
        - expect-column-name

  expect-column-name: !expect_identifier entity.name.column.sql

  expect-virtual-column-definition:
    - match: !word generated
      scope: storage.modifier.sql
      set:
        - !expect_keyword virtual
        - !expect_in_parens expression
        - !expect_keyword as
        - !expect_keyword always
    - include: else-pop

  expect-type:
    - match: '{{builtin_type}}'
      scope: storage.type.sql
      set:
        - match: '(\()\s*(\d*)\s*(\))'
          captures:
            1: punctuation.section.group.begin.sql
            2: constant.numeric.sql
            3: punctuation.section.group.end.sql
          pop: true
        - include: else-pop

    - match: (?=\S)
      set: expression

  column-constraint:
    - include: pop-on-terminator
    - match: !word PRIMARY|KEY
      scope: keyword.other.sql

  table-partitioning-clause:
    - match: !word partition
      scope: keyword.other.sql
      set:
        - !meta_set meta.create.table.partition.sql
        - - match: !word list
            scope: keyword.other.sql
            set:
              - !expect_in_parens partition-list-items
              - !expect_in_parens expression-list
        - !expect_keyword by
    - include: else-pop

  partition-list-items:
    - include: pop-on-terminator
    - include: comma
    - match: (?=\S)
      push:
        - !expect_keyword [ values, keyword.other.sql, !expect_in_parens expression-list ]
        - !expect_identifier entity.name.other.partition.sql
        - !expect_keyword partition

  create-view:
    - match: !word AS
      scope: keyword.other.sql
      set: query

  create-materialized-view:
    - match: !word AS
      scope: keyword.other.sql
      set: query

  expect-table-name:
    - match: (?:([^.\s]+)(\.))?({{ident}})
      captures:
        1: variable.other.package.sql
        2: punctuation.accessor.sql
        3: entity.name.table.sql
      pop: true
    - include: else-pop

  expect-schema-name:
    - match: ({{ident}}(?:<xx>)?)(\.)
      captures:
        1: variable.other.schema.sql
        2: punctuation.accessor.sql
      pop: true
    - include: else-pop

  invoker-rights:
    - match: !word AUTHID|CURRENT_USER|DEFINER
      scope: keyword.other.sql
    - include: else-pop

  procedure-spec:
    - match: ''
      set:
        - !expect_in_parens formal-parameters
        - !expect_identifier entity.name.function.sproc.sql
        - expect-schema-name

  procedure-definition:
    - match: !word AS|IS
      scope: keyword.other.sql
      set:
        - match: !word BEGIN
          scope: keyword.other.sql
          set: statement-block
        - include: declarations

    - include: else-pop

  formal-parameters:
    - meta_scope: meta.PARAMS
    - include: pop-on-terminator
    - include: comma
    - match: '{{ident}}'
      scope: variable.parameter.sql
      push:
        - !meta meta.parameter.sql-declaration
        - expect-default-value
        - expect-type
        - !expect_keyword [ OUT, storage.modifier.sql ]
        - !expect_keyword [ IN, storage.modifier.sql ]

  expect-default-value:
    - match: !word DEFAULT
      scope: storage.modifier.sql
      set: expression
    - match: ':='
      scope: keyword.operator.assignment.sql
      set: expression
    - include: else-pop

  declarations:
    - include: block

    - match: !word PRAGMA
      scope: keyword.other.sql
      push:
        - meta_scope: meta.pragma.sql
        - !pop_on ;
        - include: expression

    - match: !word TYPE
      scope: storage.type.sql
      push:
        - !meta meta.definition.sql.type
        - type-definition-value
        - !expect_keyword IS
        - !expect_identifier entity.name.type

    - match: !word PROCEDURE
      scope: storage.type.function.sql
      push:
        - !meta meta.function.sql
        - procedure-definition
        - !meta_set meta.function.definition.sql
        - procedure-spec

    - match: !word FUNCTION
      scope: storage.type.function.sql
      push:
        - !meta meta.function.sql
        - procedure-definition
        - !meta_set meta.function.definition.sql
        - !expect_keyword PIPELINED
        - expect-type
        - !expect_keyword RETURN
        - procedure-spec

    - match: '{{unquoted_identifier}}'
      scope: variable.other.sql
      push:
        - - include: expect-default-value
        - expect-type
        - !expect_keyword [ CONSTANT, storage.modifier.sql ]
  
  type-definition-value:
    - match: !word RECORD
      scope: storage.type.sql
      set:
        - match: (?=\()
          set: !expect_in_parens column-defs
        - include: else-pop

    - match: !word TABLE
      scope: storage.type.sql
      set:
        - - include: expect-type
        - !expect_keyword OF


# Expressions ##################################################################

  statement-simple:
    - match: !word RETURN
      scope: keyword.other.sql
      set: expression

    - match: !word COMMIT
      scope: keyword.other.sql

    - include: statement-expression

  statement-expression:
    - match: ':='
      scope: keyword.operator.assignment.sql

    - include: expression

  expression:
    - include: scope:source.sql.oracle#expression

  expression-list:
    - include: scope:source.sql.oracle#expression-list

  query:
    - include: scope:source.sql.oracle#query

  comma:
    - match: ','
      scope: punctuation.separator.comma.sql

  case-statement:
    - match: !word CASE
      scope: keyword.control.case.sql
      push:
        - !meta meta.control.sql.case
        - case-statement-contents
        - - !pop_on [ !word when ]
          - include: expression

  case-statement-contents:
    - match: !word WHEN|THEN|ELSE
      scope: keyword.control.conditional.sql

    - !end CASE

    - include: statements

    - match: \S+
      scope: invalid.illegal